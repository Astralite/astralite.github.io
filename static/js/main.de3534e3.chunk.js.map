{"version":3,"sources":["modules/fullscreen.js","components/classes-dropdown/classes-dropdown.jsx","components/info-box/info-box.jsx","components/subtitle/subtitle.jsx","components/subtitle-container/subtitle-container.jsx","components/spell-cell/spell-cell.jsx","components/spell-cell-container/spell-cell-container.jsx","components/level-selector-dropdown/level-selector-dropdown.jsx","components/spell-slots-item/spell-slots-item.jsx","components/spell-slots/spell-slots.jsx","components/spell-modal/spell-modal.jsx","App.js","index.js"],"names":["toggleFullScreen","doc","window","document","docEl","documentElement","requestFullScreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","cancelFullScreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","call","ClassesDropdown","classes","onClickFunction","Dropdown","className","Toggle","variant","id","Menu","map","dndClass","subClassItems","subclasses","subClass","Item","onClick","name","index","Fragment","Divider","InfoBox","selectedClass","classInfo","hit_die","proficiencies","proficiency_choices","saving_throws","sT","proficiency","length","from","choice","Subtitle","prefix","text","toString","toUpperCase","SubTitleDisplayContainer","parentName","selectedLevel","SpellCell","spellIndex","spellName","cellClickFunction","colorStyle","SpellCellContainer","spells","spell","sort","a","b","LevelSelectorDropdown","Array","val","idx","SpellSlotsItem","level","info","SpellSlots","levelInfo","spellCastingInfo","filter","reduce","acc","hasOwnProperty","spellcasting","itemsToDisplay","totalSpellSlots","key","numberOfSlots","push","item","SpellModal","show","onHide","spellInfo","desc","duration","range","heading","content","Modal","size","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","App","apiUrl","state","classIndex","parentIndex","selectedSpell","showModal","toggleModal","setState","hideModal","selectSpell","axios","get","then","newSpellInfo","data","selectClass","updateClassInfo","selectLevel","updateLevelInfo","selectedClassInfo","find","selectedSubClassInfo","selectedClassIndex","selectedParentIndex","primaryClassIndex","currentSpellInfo","indexOf","classSpells","results","currentClassData","currentSubClassInfo","undefined","subClassData","currentSubClassData","this","promises","forEach","all","responses","newClassData","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.de3534e3.chunk.js","sourcesContent":["function toggleFullScreen() {\r\n  var doc = window.document;\r\n  var docEl = doc.documentElement;\r\n\r\n  var requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;\r\n  var cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;\r\n\r\n  if(!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {\r\n    requestFullScreen.call(docEl);\r\n  }\r\n  else {\r\n    cancelFullScreen.call(doc);\r\n  }\r\n}\r\n\r\nexport default toggleFullScreen;","import React from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nimport './classes-dropdown.scss';\r\n\r\nconst ClassesDropdown = ({ classes, onClickFunction }) => {\r\n  return (\r\n    <Dropdown className=\"classes-dropdown\">\r\n      <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\r\n        Class / SubClass\r\n      </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu>\r\n        {classes.map(dndClass => {\r\n          // Prepare the sublasses for inclusion underneath each primary dnd Class\r\n          const subClassItems = dndClass.subclasses && dndClass.subclasses.map(subClass => (\r\n            <Dropdown.Item key={subClass.index} onClick={() => {onClickFunction(subClass.name, subClass.index, dndClass.name, dndClass.index)}}> - {subClass.name}</Dropdown.Item>\r\n          ))\r\n          return (\r\n            <React.Fragment key={dndClass.index}>\r\n              <Dropdown.Item onClick={() => {onClickFunction(dndClass.name, dndClass.index, '', '')}}>{dndClass.name}</Dropdown.Item>\r\n              {subClassItems}\r\n              <Dropdown.Divider />\r\n            </React.Fragment>\r\n          )\r\n        })}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default ClassesDropdown;","import React from 'react';\r\n\r\nimport './info-box.scss';\r\n\r\nconst InfoBox = ({ selectedClass, classInfo }) => {\r\n  \r\n  if (classInfo) {\r\n\r\n    const { hit_die, proficiencies, proficiency_choices, saving_throws } = classInfo;\r\n\r\n    return (\r\n      <div className=\"menu-item info-box\">\r\n\r\n        <div className=\"hit-die\">\r\n          <span>Hit Die:</span> {hit_die}\r\n        </div>\r\n\r\n        <div className=\"saving-throws\">\r\n          <span>Savings Throws:</span>\r\n\r\n          {typeof saving_throws === \"object\" && saving_throws.map(sT => (\r\n            <div key={sT.index} className=\"saving-throw\">\r\n              {sT.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"proficiencies\">\r\n          <span>Proficiencies:</span>\r\n\r\n          {typeof proficiencies === \"object\" && proficiencies.map(proficiency => (\r\n            <div key={proficiency.index} className=\"proficiency\">\r\n              {proficiency.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"proficiency-choices\">\r\n          <span>Proficiency Choices: </span>\r\n\r\n          {typeof proficiency_choices === \"object\" && (proficiency_choices.length > 0) && proficiency_choices[0].from.map(choice => (\r\n            <div key={choice.index} className=\"proficiency\">\r\n              {choice.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  } else {\r\n    return <div className=\"menu-item info-box\">No Class Selected</div>\r\n  }\r\n\r\n};\r\n\r\nexport default InfoBox;","import React from 'react';\r\n\r\nimport './subtitle.scss';\r\n\r\nconst Subtitle = ({ prefix, text }) => {\r\n  return (\r\n    <div className=\"subtitle\">\r\n      {prefix}&nbsp;<div className=\"subtitle-text\">{text.toString().toUpperCase()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Subtitle;","import React from 'react';\r\nimport Subtitle from \"../subtitle/subtitle\";\r\n\r\nimport './subtitle-container.scss';\r\n\r\nconst SubTitleDisplayContainer = ({ parentName, className, selectedLevel }) => {\r\n  return (\r\n    <div className=\"menu-item class-display-box row\">\r\n      <Subtitle prefix=\"Class: \" text={parentName || className} />\r\n      {(parentName) && <Subtitle prefix=\"SubClass: \" text={parentName && className} />}\r\n      {(selectedLevel) && <Subtitle prefix=\"Level: \" text={selectedLevel.toString()} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubTitleDisplayContainer;","import React from 'react';\r\n\r\nimport './spell-cell.scss';\r\n\r\nconst SpellCell = ({ spellIndex, spellName, cellClickFunction, colorStyle }) => {\r\n  return (\r\n    <div className={`spell-cell ${colorStyle}`} onClick={() => cellClickFunction(spellIndex)}>\r\n      {spellName}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpellCell;","import React from 'react';\r\nimport SpellCell from '../spell-cell/spell-cell';\r\n\r\nimport './spell-cell-container.scss';\r\n\r\nconst SpellCellContainer = ({ spells, cellClickFunction, colorStyle }) => {\r\n\r\n  // Class and subclass spells data use two different formats\r\n  // so here we format subclass data to be like that of class\r\n  spells = spells.map(spell => (spell.index && spell) || spell.spell);\r\n\r\n  // Sort the spells alphabetically\r\n  spells = spells.sort((a, b) => (a.index < b.index) ? -1 : 1);\r\n\r\n  return (\r\n    <div className=\"menu-item spells-container\">\r\n      {spells.map(spell => (\r\n        <SpellCell\r\n          key={spell.index}\r\n          spellIndex={spell.index}\r\n          spellName={spell.name}\r\n          cellClickFunction={cellClickFunction}\r\n          colorStyle={colorStyle} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpellCellContainer;","import React from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nimport './level-selector-dropdown.scss';\r\n\r\nconst LevelSelectorDropdown = ({ onClickFunction }) => {\r\n  return (\r\n    <Dropdown className=\"level-selector-dropdown\">\r\n      <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\r\n        Level\r\n      </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu>\r\n        {[...Array(20)].map((val, idx) => {\r\n          return (\r\n            <Dropdown.Item key={idx} onClick={() => onClickFunction(idx+1)}>{idx+1}</Dropdown.Item>\r\n          )\r\n        })}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default LevelSelectorDropdown;","import React from 'react';\r\n\r\nimport './spell-slots-item.scss';\r\n\r\nconst SpellSlotsItem = ({ level, info }) => {\r\n  return (\r\n    <div className='spell-slots-item'>\r\n      <div className='slot-title'>{`Lvl. ${level}`}</div>\r\n      <div className='content'>{info}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpellSlotsItem;","import React from 'react';\r\n\r\nimport SpellSlotsItem from '../spell-slots-item/spell-slots-item.jsx';\r\nimport './spell-slots.scss';\r\n\r\nconst SpellSlots = ({ levelInfo, selectedLevel }) => {\r\n  const DnD5MaxSpellLevel = 9;\r\n\r\n  // Extract all level info objects for the selected level and assign them to an array\r\n  // This is necessary since there may be multiple level info objects for a given level\r\n  const levelInfos = levelInfo.filter(info => info.level === selectedLevel);\r\n  // Now find the spellcasting info from this array\r\n  const spellCastingInfo = levelInfos.reduce((acc, info) => ((info.hasOwnProperty('spellcasting')) ? info.spellcasting : acc), null);\r\n  \r\n  // If the selected class has spell slots...\r\n  if (spellCastingInfo) {\r\n\r\n    let itemsToDisplay = [];\r\n    let totalSpellSlots = 0;\r\n    for (let level = 1; level <= DnD5MaxSpellLevel; level++)  {\r\n      let key = `spell_slots_level_${level}`;\r\n      let numberOfSlots = spellCastingInfo[key];\r\n\r\n      totalSpellSlots += numberOfSlots || 0;\r\n      if (numberOfSlots) {itemsToDisplay.push({key, level, info: numberOfSlots})};\r\n    }\r\n\r\n    return (\r\n      <div className=\"menu-item spell-slots\">\r\n        <div>Number of Spell Slots (Total: {totalSpellSlots})</div>\r\n        <div className=\"spell-slots-box\">\r\n          {\r\n            itemsToDisplay.map((item) => \r\n              <SpellSlotsItem key={item.key} {...item} />\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  \r\n  } else {\r\n    return <div className=\"menu-item info-box\">Class Has No Spell Slots</div>\r\n  }\r\n\r\n};\r\n\r\nexport default SpellSlots;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Modal';\r\n\r\nimport './spell-modal.scss';\r\n\r\nfunction SpellModal({ show, onHide, spellInfo }) {\r\n  const { name, desc, level, duration, range } = spellInfo;\r\n  const heading = name || \"Loading...\";\r\n  const content = desc || \"\";\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={onHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {heading}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"attributes-container\">\r\n          <div className=\"attribute\"><b>Level:&nbsp;</b>{level}</div>\r\n          <div className=\"attribute\"><b>Duration:&nbsp;</b>{duration}</div>\r\n          <div className=\"attribute\"><b>Range:&nbsp;</b>{range}</div>\r\n        </div>\r\n        {content}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default SpellModal;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport toggleFullScreen from \"./modules/fullscreen.js\";\r\n\r\nimport \"./App.scss\";\r\nimport ClassesDropdown from \"./components/classes-dropdown/classes-dropdown\";\r\nimport InfoBox from \"./components/info-box/info-box\";\r\nimport SubTitleDisplayContainer from './components/subtitle-container/subtitle-container';\r\nimport SpellCellContainer from './components/spell-cell-container/spell-cell-container';\r\nimport LevelSelectorDropdown from './components/level-selector-dropdown/level-selector-dropdown';\r\nimport SpellSlots from './components/spell-slots/spell-slots';\r\nimport SpellModal from './components/spell-modal/spell-modal';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.apiUrl = \"https://www.dnd5eapi.co/api\";\r\n    this.state = {\r\n      classes: [],\r\n      selectedClass: {\r\n        className: \"\",\r\n        classIndex: \"\",\r\n        parentName: \"\",\r\n        parentIndex: \"\",\r\n      },\r\n      selectedLevel: 1,\r\n      selectedSpell: '',\r\n      levelInfo: {},\r\n      spellInfo: {},\r\n      showModal: true\r\n    };\r\n\r\n    this.toggleModal = () => {\r\n      this.setState({ ...this.state, showModal: !this.state.showModal });\r\n    }\r\n\r\n    this.hideModal = () => {\r\n      this.setState({ ...this.state, showModal: false });\r\n    }\r\n\r\n    this.showModal = () => {\r\n      this.setState({ ...this.state, showModal: true });\r\n    }\r\n    \r\n    this.selectSpell = (selectedSpell) => {\r\n      this.setState({ ...this.state, selectedSpell }\r\n        ,this.showModal // Callback function displays modal component on screen\r\n      );\r\n\r\n      // Also retrieve the spell information for selected spell and save it to state\r\n      axios.get(this.apiUrl + \"/spells/\" + selectedSpell)\r\n      .then(({ data }) => {\r\n        const newSpellInfo = data;\r\n        let spellInfo = this.state.spellInfo;\r\n        spellInfo[newSpellInfo.index] = newSpellInfo;\r\n        this.setState(\r\n          {\r\n            ...this.state,\r\n            spellInfo\r\n          }\r\n        )\r\n      })\r\n    }\r\n\r\n    this.selectClass = (className, classIndex, parentName, parentIndex) => {\r\n      this.setState({ ...this.state, selectedClass: { className, classIndex, parentName, parentIndex } }\r\n      ,this.updateClassInfo\r\n      );\r\n    }\r\n\r\n    this.selectLevel = (selectedLevel = 1) => {\r\n      this.setState({ ...this.state, selectedLevel },\r\n      this.updateLevelInfo\r\n      );\r\n    }\r\n\r\n    // Function returns the current information for either:\r\n    // 1. The currently selected class if it is a primary class OR\r\n    // 2. The currently selected class' parent if it is a subclass\r\n    this.selectedClassInfo = () => this.state.classes.find(\r\n      (dndClass) => (\r\n        dndClass.index === this.state.selectedClass.classIndex\r\n        || dndClass.index === this.state.selectedClass.parentIndex\r\n      )\r\n    )\r\n\r\n    // Function returns the current information for selected subclass or undefined\r\n    // if selected class is not a subclass or not found in the parent\r\n    this.selectedSubClassInfo = () => {\r\n      if (!this.state.selectedClass.parentIndex) return undefined;\r\n      const { subclasses } = this.selectedClassInfo();\r\n      return subclasses.find(subClass => (\r\n        subClass.index === this.state.selectedClass.classIndex\r\n      ))\r\n    }\r\n\r\n    // Retrieve updated data for the selected class\r\n    this.updateClassInfo = () => {\r\n      const selectedClassIndex = this.state.selectedClass.classIndex;\r\n      const selectedParentIndex = this.state.selectedClass.parentIndex;\r\n      const primaryClassIndex = (selectedParentIndex || selectedClassIndex);\r\n      // If not already obtained then get spell information for this class\r\n      // (or parent class in the case of subclass being selected)\r\n      const currentSpellInfo = this.selectedClassInfo().spells;\r\n      if (typeof currentSpellInfo === \"string\" && currentSpellInfo.indexOf(\"/api\") >= 0) { // if we haven't retrieved spell info yet...\r\n        axios.get(this.apiUrl + \"/classes/\" + primaryClassIndex + \"/spells\")\r\n        .then(({ data }) => {\r\n          const classSpells = data.results;\r\n          this.setState(\r\n            {\r\n              ...this.state,\r\n              classes: this.state.classes.map((currentClassData) => {\r\n                return currentClassData.index === primaryClassIndex\r\n                  ? {...currentClassData, spells: classSpells}\r\n                  : currentClassData;\r\n              })\r\n            }\r\n          )\r\n\r\n        })\r\n      }\r\n\r\n      // If the selected class is a subclass also retrieve subclass data\r\n      // Overwrite the old subclass properties for selected subclass with the new ones\r\n      if (selectedParentIndex) {\r\n        const currentSubClassInfo = this.selectedClassInfo().subclasses.find(({ index }) => index === selectedClassIndex);\r\n        if (typeof currentSubClassInfo === \"object\" && currentSubClassInfo.desc === undefined) {\r\n          axios.get(this.apiUrl + \"/subclasses/\" + selectedClassIndex)\r\n          .then(({ data }) => {\r\n            const subClassData = data;\r\n            this.setState(\r\n              {\r\n                ...this.state,\r\n                classes: this.state.classes.map((currentClassData) => {\r\n                  return currentClassData.index === selectedParentIndex // For the parent of the selected subclass...\r\n                    ? {...currentClassData, subclasses: currentClassData.subclasses.map(currentSubClassData => { // Assign existing properties again plus Map through each subclass item\r\n                      return currentSubClassData.index === selectedClassIndex // If the subclass item index matches the selected class index...\r\n                        ? subClassData // Return the new item data\r\n                        : currentSubClassData; // Otherwise return the old data\r\n                    })}\r\n                    : currentClassData;\r\n                  })\r\n              }\r\n            )\r\n          })\r\n        }\r\n      }\r\n\r\n      // Also update spellSlot info\r\n      this.updateLevelInfo();\r\n    }\r\n\r\n    this.updateLevelInfo = () => {\r\n      const primaryClassIndex = this.state.selectedClass.parentIndex || this.state.selectedClass.classIndex;\r\n      if(!primaryClassIndex) return undefined;\r\n      const currentSpellSlotInfo = this.state.levelInfo[primaryClassIndex];\r\n      // If not already obtained then get spell slot information for this class\r\n      // (or parent class in the case of subclass being selected)\r\n      if (typeof currentSpellSlotInfo === \"undefined\") {\r\n        axios.get(this.apiUrl + \"/classes/\" + primaryClassIndex + \"/levels\")\r\n        .then(({ data }) => {\r\n\r\n          let levelInfo = this.state.levelInfo;\r\n          levelInfo[primaryClassIndex] = data;\r\n          this.setState(\r\n            {\r\n              ...this.state,\r\n              levelInfo\r\n            }\r\n          )\r\n\r\n        })\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    // After the component has mounted retrieve dnd class and subclass\r\n    // data from the API to populate our dropdown box.\r\n    axios.get(this.apiUrl + \"/classes\").then(({ data }) => {\r\n      const classes = data.results;\r\n      this.setState({ ...this.state, classes });\r\n\r\n      // For each dnd class create an axios get request for retrieving\r\n      // class details from the API.\r\n      // Performance is acceptable while we have a small number of classes.\r\n      let promises = [];\r\n      classes.forEach((dndClass) => {\r\n        promises.push(axios.get(`${this.apiUrl}/classes/${dndClass.index}`));\r\n      });\r\n\r\n      // Resolve promises and add the data to state\r\n      axios.all(promises).then((responses) => {\r\n        responses.forEach(({ data }) => {\r\n          let newClassData = data;\r\n\r\n          // Here we update the state's \"classes\" array replacing\r\n          // current items with newer items using a map\r\n          this.setState({\r\n            ...this.state,\r\n            classes: this.state.classes.map((currentClassData) => {\r\n              return currentClassData.index === newClassData.index\r\n                ? newClassData\r\n                : currentClassData;\r\n            })\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <div className=\"toggle-fs\" onClick={toggleFullScreen} />\r\n        <h1 className=\"menu-item title\">D&D Spells</h1>\r\n\r\n        <div className=\"menu-item selectors-container row\">\r\n          <ClassesDropdown\r\n            classes={this.state.classes}\r\n            onClickFunction={this.selectClass}\r\n          />\r\n          <LevelSelectorDropdown\r\n            onClickFunction={this.selectLevel}\r\n          />\r\n        </div>\r\n\r\n        <SubTitleDisplayContainer {...this.state.selectedClass} selectedLevel={this.state.selectedLevel} />\r\n\r\n        <InfoBox\r\n          classInfo={this.selectedClassInfo()}\r\n        />\r\n\r\n        {\r\n          this.state.levelInfo[this.state.selectedClass.parentIndex || this.state.selectedClass.classIndex]\r\n          && <SpellSlots \r\n              selectedLevel={this.state.selectedLevel}\r\n              levelInfo={this.state.levelInfo[this.state.selectedClass.parentIndex || this.state.selectedClass.classIndex]}\r\n            />\r\n        }\r\n\r\n        {\r\n          this.selectedClassInfo() // If there is class info available...\r\n          && typeof this.selectedClassInfo().spells === \"object\" // and the class object returned has a spells property...\r\n          && (\r\n          <>\r\n            <h3 className=\"menu-item title color-style-1\">Class Spells</h3>\r\n            <SpellCellContainer spells={this.selectedClassInfo().spells} cellClickFunction={this.selectSpell} colorStyle=\"color-style-1\" />\r\n          </>\r\n          ) // render SpellsContainer with spells from selected class\r\n        }\r\n\r\n        {\r\n          this.selectedSubClassInfo() // If there is subclass info available...\r\n          && typeof this.selectedSubClassInfo().spells === \"object\" // and the subclass object returned has a spells property...\r\n          && (\r\n            <>\r\n              <h3 className=\"menu-item title color-style-2\">SubClass Spells</h3>\r\n              <SpellCellContainer spells={this.selectedSubClassInfo().spells} cellClickFunction={this.selectSpell} colorStyle=\"color-style-2\" />\r\n            </>\r\n          ) // render SpellsContainer with spells from selected subclass\r\n        }\r\n\r\n        {this.state.selectedSpell // If a spell has been selected\r\n        && <SpellModal\r\n          show={this.state.showModal}\r\n          onHide={this.hideModal}\r\n          spellInfo={\r\n            this.state.spellInfo[this.state.selectedSpell] || this.state.selectedSpell\r\n          }\r\n        />}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}